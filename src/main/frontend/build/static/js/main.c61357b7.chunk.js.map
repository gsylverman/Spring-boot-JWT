{"version":3,"sources":["components/Header/index.tsx","components/Login/index.tsx","store/actions/types.ts","components/utils/tools.ts","store/actions/notificationActions.ts","components/utils/Post.tsx","components/Home/index.tsx","store/actions/postsActions.ts","components/Contact/index.tsx","ErrorPage/ErrorPage.tsx","hoc/MainLayout.tsx","routes.tsx","reportWebVitals.ts","store/reducers/index.ts","store/reducers/postsReducer.ts","store/reducers/notifications.ts","store/index.ts","index.tsx"],"names":["Header","to","Login","onSubmit","e","preventDefault","a","axios","post","username","password","response","console","log","data","fetch","type","placeholder","GET_POSTS","SUCCES","ERROR","CLEAR","showToast","message","toast","error","position","POSITION","BOTTOM_RIGHT","success","clearGlobalNotifications","Post","title","body","style","background","Home","posts","useSelector","state","dispatch","useDispatch","useEffect","length","get","payload","map","item","id","Contact","useState","token","setToken","headers","Authorization","onChange","target","value","Errorpage","MainLayout","children","notifications","tools","succes","Routes","path","component","exact","ErrorPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c61357b7.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\n\nexport interface HeaderProps {}\n\nconst Header: React.FC<HeaderProps> = () => {\n  return (\n    <header>\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/contact\">Contact</Link>\n      <Link to=\"/login\">Login</Link>\n    </header>\n  );\n};\n\nexport default Header;\n","import axios from \"axios\";\n\nexport interface LoginProps {}\n\nconst Login: React.FC<LoginProps> = () => {\n  const login = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const fetch = async () => {\n      try {\n        const response = await axios.post(\n          \"http://localhost:8080/authenticate\",\n          {\n            username: \"admin\",\n            password: \"password\",\n          }\n        );\n        console.log(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetch();\n  };\n\n  return (\n    <form onSubmit={login}>\n      <div>\n        Username:\n        <input type=\"text\" placeholder=\"username\" />\n      </div>\n      <div>\n        Password:\n        <input type=\"text\" placeholder=\"password\" />\n      </div>\n      <div>\n        <input type=\"submit\" />\n      </div>\n    </form>\n  );\n};\n\nexport default Login;\n","export const GET_POSTS = \"get_posts\";\n\nexport interface PostType {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport interface PostsDispatch {\n  type: typeof GET_POSTS;\n  payload: Array<PostType>;\n}\n","import { toast } from \"react-toastify\";\n// notifications\nexport const SUCCES = \"succes\";\nexport const ERROR = \"error\";\nexport const CLEAR = \"clear\";\n\nexport const showToast = (type: string, message: string) => {\n  switch (type) {\n    case ERROR:\n      toast.error(message, {\n        position: toast.POSITION.BOTTOM_RIGHT,\n      });\n      break;\n    case SUCCES:\n      toast.success(message, {\n        position: toast.POSITION.BOTTOM_RIGHT,\n      });\n      break;\n    default:\n      return false;\n  }\n};\n","import { ERROR, SUCCES, CLEAR } from \"../../components/utils/tools\";\n\nexport const errorNotification = (message: string) => {\n  return {\n    type: ERROR,\n    payload: message,\n  };\n};\n\nexport const succesNotification = () => {\n  return {\n    type: SUCCES,\n  };\n};\n\nexport const clearGlobalNotifications = () => {\n  return {\n    type: CLEAR,\n  };\n};\n","import { PostType } from \"../../store/actions/types\";\n\nconst Post: React.FC<PostType> = ({ title, body }) => {\n  return (\n    <div style={{ background: \"lightsilver\" }}>\n      <h1>{title}</h1>\n      <p>{body}</p>\n      <hr />\n    </div>\n  );\n};\n\nexport default Post;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootStore } from \"../../store\";\nimport { getPosts } from \"../../store/actions/postsActions\";\nimport { PostType } from \"../../store/actions/types\";\n\nimport Post from \"../utils/Post\";\n\nexport interface HomeProps {}\n\nconst Home: React.FC<HomeProps> = () => {\n  const posts = useSelector((state: RootStore) => state.posts);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (posts && !posts.length) dispatch(getPosts());\n  }, [dispatch, posts]);\n\n  console.log(posts);\n  return (\n    <div>\n      Home\n      <div>\n        {posts.map((item: PostType) => (\n          <Post key={item.id} {...item} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { GET_POSTS } from \"./types\";\nimport {\n  clearGlobalNotifications,\n  errorNotification,\n  succesNotification,\n} from \"./notificationActions\";\n\nexport const getPosts = () => async (dispatch: Dispatch<any>) => {\n  try {\n    const response = await axios.get(\n      \"https://jsonplaceholder.typicode.com/posts\"\n    );\n    dispatch({\n      type: GET_POSTS,\n      payload: response.data,\n    });\n    dispatch(succesNotification());\n    dispatch(clearGlobalNotifications());\n  } catch (e) {\n    dispatch(errorNotification(e.message));\n    dispatch(clearGlobalNotifications());\n  }\n};\n","import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nexport interface ContactProps {}\nconst Contact: React.FC<ContactProps> = () => {\n  const [token, setToken] = useState<string>(\"\");\n\n  const requestDataWithTokenValidation = (\n    e: React.FormEvent<HTMLFormElement>\n  ) => {\n    e.preventDefault();\n    fetch();\n  };\n\n  // axios.defaults.headers.common = { Authorization: `Bearer ${token}` };\n\n  const fetch = async () => {\n    console.log({\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    try {\n      const response = await axios.get(\"http://localhost:8080/api/v1/data\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      console.log(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <form onSubmit={requestDataWithTokenValidation}>\n      <div>\n        Token:\n        <input\n          onChange={(e) => setToken(e.target.value)}\n          type=\"text\"\n          placeholder=\"token\"\n          value={token}\n        />\n      </div>\n      <div>\n        <input type=\"submit\" value=\"Request data with token validation\" />\n      </div>\n    </form>\n  );\n};\n\nexport default Contact;\n","export interface ErrorpageProps {}\n\nconst Errorpage: React.FC<ErrorpageProps> = () => {\n  return <div>ErrorPage</div>;\n};\n\nexport default Errorpage;\n","import { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport * as tools from \"../components/utils/tools\";\n\nexport interface MainLayoutProps {}\n\nconst MainLayout: React.FC<MainLayoutProps> = ({ children }) => {\n  const notifications = useSelector((state: any) => state.notifications);\n  useEffect(() => {\n    if (notifications && notifications.error) {\n      tools.showToast(tools.ERROR, notifications.message);\n    }\n    if (notifications && notifications.succes) {\n      tools.showToast(tools.SUCCES, \"posts loaded successfuly\");\n    }\n  }, [notifications]);\n  return (\n    <>\n      <ToastContainer />\n      <div style={{ background: \"lightblue\" }}>{children}</div>\n    </>\n  );\n};\n\nexport default MainLayout;\n","import { Switch, BrowserRouter, Route } from \"react-router-dom\";\n\nimport Header from \"./components/Header\";\nimport Login from \"./components/Login\";\nimport Home from \"./components/Home\";\nimport Contact from \"./components/Contact\";\nimport ErrorPage from \"./ErrorPage/ErrorPage\";\nimport MainLayout from \"./hoc/MainLayout\";\n\nexport interface RoutesProps {}\n\nconst Routes: React.FC<RoutesProps> = () => {\n  return (\n    <BrowserRouter>\n      <Header />\n      <MainLayout>\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/\" component={Home} exact />\n          <Route path=\"/\" component={ErrorPage} />\n        </Switch>\n      </MainLayout>\n    </BrowserRouter>\n  );\n};\n\nexport default Routes;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { notifications } from \"./notifications\";\nimport { postsReducer as posts } from \"./postsReducer\";\nimport { combineReducers } from \"redux\";\n\nexport const rootReducer = combineReducers({\n  posts,\n  notifications,\n});\n","import { GET_POSTS, PostsDispatch, PostType } from \"../actions/types\";\n\nexport const postsReducer = (\n  state: Array<PostType> | Array<any> = [],\n  action: PostsDispatch\n) => {\n  switch (action.type) {\n    case GET_POSTS:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import { ERROR, SUCCES, CLEAR } from \"../../components/utils/tools\";\n\nexport const notifications = (state = {}, action: any) => {\n  console.log(action);\n  switch (action.type) {\n    case ERROR:\n      return {\n        ...state,\n        error: true,\n        message: action.payload,\n      };\n    case SUCCES:\n      return {\n        ...state,\n        succes: true,\n      };\n    case CLEAR:\n      return {};\n    default:\n      return state;\n  }\n};\n","import { rootReducer } from \"./reducers/index\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport type RootStore = ReturnType<typeof rootReducer>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Routes from \"./routes\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}